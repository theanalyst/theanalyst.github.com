<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Often Bearing Metaphoric Tense</title>
    <link>http://abhishekl.in/tags/python/</link>
    <description>Recent content in Python on Often Bearing Metaphoric Tense</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved 2012-15</copyright>
    <lastBuildDate>Tue, 28 Jul 2015 00:03:28 +0530</lastBuildDate>
    <atom:link href="http://abhishekl.in/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Caching pip packages using devpi &amp; docker</title>
      <link>http://abhishekl.in/post/Tech/devpi-docker/</link>
      <pubDate>Tue, 28 Jul 2015 00:03:28 +0530</pubDate>
      
      <guid>http://abhishekl.in/post/Tech/devpi-docker/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;re using python packages &amp;amp; virtualenvs a lot, you can
drastically speed up the time to setup your environment, (which mostly
involves download of pip packages, which tend to be network intensive
&amp;amp; time consuming) by caching pip packages. Similar to other caching
proxies like apt, python has its own caching proxy in the form of
&lt;a href=&#34;http://doc.devpi.net/latest/&#34;&gt;devpi&lt;/a&gt;, which allows you to run a
pypi mirror in your laptop. (devpi is much more than just a pip
mirror, for more on its capabilities read the link)&lt;/p&gt;

&lt;p&gt;Though running devpi by downloading the pip package is
&lt;a href=&#34;http://doc.devpi.net/latest/quickstart-pypimirror.html&#34;&gt;easy enough&lt;/a&gt;,
running it permanently requires steps like configuring nginx etc. If
you&amp;rsquo;re lazy, it is simple enough, to run it as a docker container, and
configure your init system to start the container on system startup.
Scrapinghub&amp;rsquo;s
&lt;a href=&#34;https://github.com/scrapinghub/docker-devpi&#34;&gt;docker-devpi&lt;/a&gt; image
makes it easy enough to get started. Running a devpi server is as
simple as:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;$ &lt;/span&gt;docker pull scrapinghub/devpi
 &lt;span style=&#34;color: #B8860B&#34;&gt;$ &lt;/span&gt;docker run -d --name devpi -p 3141:3141 scrapinghub/devpi
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Next configure your pip to pull from here. This is as simple as
sticking the following line into your pip.conf (which should reside in
~/.pip/pip.conf, if there is no file, create it)&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;[global]&lt;/span&gt;
&lt;span style=&#34;color: #BB4444&#34;&gt;index-url&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;http://localhost:3141/root/pypi/+simple/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Next downloading a pip package will be mirrored, trying to install it
again (even in other virtualenvs) should be almost instantaneous.&lt;/p&gt;

&lt;p&gt;Since the docker container was already started with a name parameter,
this container can be restarted next time simply by doing a &lt;code&gt;docker
start devpi&lt;/code&gt;. Of course this can be easily handed off to your init
system. If you&amp;rsquo;re using Ubuntu &amp;lt;= 14.04, the relevant upstart script
would be something like &lt;code&gt;/etc/init/devpi-docker.conf&lt;/code&gt; with contents
similiar to below. After adding the script, you would have to do an
&lt;code&gt;initctl reload-configuration&lt;/code&gt; for upstart to see the script.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;description &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Devpi Docker&amp;quot;&lt;/span&gt;
author &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;You&amp;quot;&lt;/span&gt;
start on filesystem and started docker
stop on runlevel &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;!2345&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
respawn
script
  /usr/bin/docker start devpi
end script
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;After this doing a &lt;code&gt;sudo start devpi-docker&lt;/code&gt; would start the devpi
docker container. Also this should be picked up by default when your
system starts.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Faster python builds in Travis with container based infra</title>
      <link>http://abhishekl.in/post/Tech/travis-builds/</link>
      <pubDate>Sun, 01 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://abhishekl.in/post/Tech/travis-builds/</guid>
      <description>&lt;p&gt;Lately, travis CI has started supporting builds using &lt;a href=&#34;http://blog.travis-ci.com/2014-12-17-faster-builds-with-container-based-infrastructure/&#34;&gt;container&lt;/a&gt;
based infrastructure which run much faster due to more available
resources and good use of caching. This is currently possible only for
projects that don&amp;rsquo;t use &lt;code&gt;sudo&lt;/code&gt; atm . For more details read &lt;a href=&#34;http://docs.travis-ci.com/user/workers/container-based-infrastructure/&#34;&gt;this&lt;/a&gt;
post. Of late, I have been submitting Pull Requests to various
projects to use this feature wherever possible. This post is primarily
oriented towards Python projects.&lt;/p&gt;

&lt;p&gt;For many python projects, a significant amount of time is spent in
installing &amp;amp; building the dependencies. So caching these should save
you a good amount of time. Pip downloads can be cached specifying a
cache directory, which will avoid hitting the pypi mirror for every
line in your requirements. The below examples assume that your testing
script is something like &lt;code&gt;make travis&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::yaml
sudo : false
cache:
  directories: 
    - $HOME/.pip-cache
script:
  - pip install -r requirements.txt --download-cache $HOME/.pip-cache   
  - make travis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above lines will make sure that for subsequent runs pip packages
from the cache are used. However the packages will still need to be be
built, which means if you&amp;rsquo;re using packages using C (lxml for eg), a
lot of time will be still spent for building the package itself. One
way of working around this would be the use of Python Wheels and
caching them as this avoids the need for subsequent builds. We could
download the wheels to a specified directory and cache that, so that
we can cut down on the build time.  So we would have something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::yaml
sudo : false
cache:
  directories: 
    - $PWD/wheelhouse
script:
  - pip wheel -r requirements.txt
  - pip install -r requirements.txt
  - make travis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And voila! We have faster travis builds.&lt;/p&gt;

&lt;p&gt;PS If you have better ways to speedup, I&amp;rsquo;ll be happy to hear, please
let me know in comments or hit me up on &lt;a href=&#34;https://twitter.com/abhishekl&#34;&gt;twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Static site generators &amp; Everything else</title>
      <link>http://abhishekl.in/post/Tech/myblog/</link>
      <pubDate>Mon, 03 Dec 2012 14:23:00 +0000</pubDate>
      
      <guid>http://abhishekl.in/post/Tech/myblog/</guid>
      <description>

&lt;p&gt;This post lists the details of my blog, which is powered by gh-pages
and pelican. In short another guy puts up his blog at GitHub and blogs
about it. It initially started as a Lorem Ipsum content while I was
testing out my rough and edgy pelican theme. You have been warned!&lt;/p&gt;

&lt;p&gt;Welcome to the new avatar of my blog which is powered by &lt;a href=&#34;http://docs.getpelican.com/en/3.0/&#34; title=&#34;pelican&#34;&gt;pelican&lt;/a&gt;,
just another static site generator. For the uninitiated, static sites
are just a bunch of html pages, reminiscent of those old times where
people used some ftp program to put some html pages in some server
space. Remember the saying, “the more things change, the more they
remain the same.” It is a full circle from plain html -&amp;gt; dynamic
content based websites -&amp;gt; Back to plain html again. Well static site
generators do just that, convert your favorite markup format into
something a webserver can serve.&lt;/p&gt;

&lt;p&gt;Also static site generators are dime a dozen, these days, you will
always get one matching the language of your choice and markup of your
choice as well. (Psst. if you are interested, I have tried making a
sentence with a few If you are the type who hates wordplay, skip right
ahead, there is nothing here… &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:0577056210bedfefeae748c0d5cac415:wordplay&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:0577056210bedfefeae748c0d5cac415:wordplay&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;).&lt;/p&gt;

&lt;p&gt;At the moment Jekyll &lt;em&gt;arguably&lt;/em&gt; leads the pack&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:0577056210bedfefeae748c0d5cac415:lists&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:0577056210bedfefeae748c0d5cac415:lists&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;,
with close to ~8.2K watchers in Github, while that metric doesn’t
actually tell the number of sites actually built using Jekyll. FYI,
almost any post on jekyll trends in Hacker News, and even the US
election campaign has used Jekyll for blogging. A more
interesting information would be just googling Jekyll, about &lt;sup&gt;4&lt;/sup&gt;&amp;frasl;&lt;sub&gt;10&lt;/sub&gt;
links in the first page go to &lt;em&gt;Jekyll&lt;/em&gt; the static site generator, the
rest mostly links to Jekyll the TV show, and none link to &lt;em&gt;Jekyll and
Hyde&lt;/em&gt;, the novella (condolences to R L Stevenson). This is similar to
googling “Big Bang Theory”, TV has a higher preference than cosmology,
of course.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:0577056210bedfefeae748c0d5cac415:Googling-the-Big-Bang-theory-will-have-actually-no-first-page-results-on-cosmology-at-all&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:0577056210bedfefeae748c0d5cac415:Googling-the-Big-Bang-theory-will-have-actually-no-first-page-results-on-cosmology-at-all&#34;&gt;0&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Now talking that much on jekyll, this site isn&amp;rsquo;t generated via Jekyll,
it is generated by Pelican, a static generator written in python. And
this was the primary reason, just that in case things need to work in
a certain way, it could be done without setting my hair on fire.
Though knowledge of python isn&amp;rsquo;t an absolute necessity if your
intention is just to create a site in pelican, but recommended. Like
other well known static site generators, pelican also features these
(last point is a bit debatable):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Good Documentation&lt;/li&gt;
&lt;li&gt;Easy templating system&lt;/li&gt;
&lt;li&gt;Good community support&lt;/li&gt;
&lt;li&gt;Written in python&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Posts are written in markdown, in emacs. A simple git repository with
post commit hooks that runs pelican on each commit, does the trick of
generating the html pages. The config file is a simple python file
which takes care of all the site related details, links etc.&lt;/p&gt;

&lt;p&gt;Pelican comes with a default set of themes, and a few others available
at the &lt;a href=&#34;https://github.com/getpelican/pelican-themes&#34;&gt;pelican-themes&lt;/a&gt; repo, which can help in setting up a blog
running without much hassle. Building a theme is also pretty easy, and
it uses Jinja templating in the backend, this blog look right now is a
customised theme built upon the existing tuxlite-tbs theme, I will
write on that another time. (This post is already long enough as it
is)&lt;/p&gt;

&lt;p&gt;For the typographically conscious, there is support from the excellent
emacs &lt;a href=&#34;https://github.com/jorgenschaefer/typoel&#34; title=&#34;Typographical Punctuation marks&#34;&gt;typo&lt;/a&gt; mode which takes care of your punctuation marks, if
you are the type who cares about the &lt;a href=&#34;http://www.smashingmagazine.com/2011/08/15/mind-your-en-and-em-dashes-typographic-etiquette/&#34; title=&#34;Mind your em and en dashes&#34;&gt;em &amp;amp; en–dashes&lt;/a&gt;. (Yes, we
have a mode for everything… including a &lt;a href=&#34;http://en.wikipedia.org/wiki/ELIZA&#34; title=&#34;Eliza, the quintessential psychotherapist&#34;&gt;psychotherapist&lt;/a&gt;, who can
kill time, if not depression) That is pretty much it, as far as
generating a site in pelican is concerned, simple.&lt;/p&gt;

&lt;h3 id=&#34;foot-notes:0577056210bedfefeae748c0d5cac415&#34;&gt;Foot Notes&lt;/h3&gt;

&lt;p&gt;popularity, its precedence in search results…
possibilities out there, generating a static site is as easy as baking
a &lt;a href=&#34;https://bolt80.com/piecrust&#34; title=&#34;PieCrust&#34;&gt;piecrust&lt;/a&gt;. You just have to &lt;a href=&#34;https://github.com/schrockwell/chisel&#34; title=&#34;Chisel&#34;&gt;chisel&lt;/a&gt; your heart&amp;rsquo;s content in
the markup format of your choice and hire a &lt;a href=&#34;http://middlemanapp.com&#34; title=&#34;Middle Man&#34;&gt;middleman&lt;/a&gt; to solve
the strange case of Dr.&lt;a href=&#34;http://jekyllrb.com&#34; title=&#34;jekyll&#34;&gt;Jekyll&lt;/a&gt; and Mr.&lt;a href=&#34;http://ringce.com/hyde&#34; title=&#34;hyde, Jekyll’s evil alter-ego in python &#34;&gt;Hyde&lt;/a&gt;, whose obsession
with &lt;a href=&#34;http://octopress.org&#34; title=&#34;Octopress, pressing content for hackers&#34;&gt;Octopress&lt;/a&gt;, is &lt;a href=&#34;https://github.com/blahed/frank&#34; title=&#34;Frank&#34;&gt;frank&lt;/a&gt;ly &lt;a href=&#34;https://github.com/caolan/petrify&#34; title=&#34;Petrify&#34;&gt;petrify&lt;/a&gt;ing. (This is far
from the list of possibilities, but it is difficult, though, to make a
valid English sentence with all the static site generators out
there. A relatively comprehensive list is at &lt;a href=&#34;http://nanoc.stoneship.org&#34; title=&#34;nanoc&#34;&gt;nanoc&lt;/a&gt; which, FYI, is
also another static site generator.  Choose your poison)&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:0577056210bedfefeae748c0d5cac415:wordplay&#34;&gt;These days, one is &lt;a href=&#34;http://awestruct.org&#34; title=&#34;Awestruct&#34;&gt;awestruc&lt;/a&gt; with the number of
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:0577056210bedfefeae748c0d5cac415:wordplay&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:0577056210bedfefeae748c0d5cac415:lists&#34;&gt;For more info on this read,a &lt;a href=&#34;https://gist.github.com/4181764&#34; title=&#34;Another list, on static site generators&#34;&gt;crowdsourced list&lt;/a&gt; and a &lt;a href=&#34;http://news.ycombinator.com/item?id=4857473&#34; title=&#34;Poll your preference&#34;&gt;HN poll&lt;/a&gt; for static generators
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:0577056210bedfefeae748c0d5cac415:lists&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>