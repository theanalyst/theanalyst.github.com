<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kindle on Often Bearing Metaphoric Tense</title>
    <link>http://abhishekl.in/tags/kindle/</link>
    <description>Recent content in Kindle on Often Bearing Metaphoric Tense</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved 2012-15</copyright>
    <lastBuildDate>Fri, 22 Jan 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://abhishekl.in/tags/kindle/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>2015: the year in books</title>
      <link>http://abhishekl.in/post/Rants/goodreads-2015/</link>
      <pubDate>Fri, 22 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://abhishekl.in/post/Rants/goodreads-2015/</guid>
      <description>&lt;p&gt;Even though I wasn&amp;rsquo;t able to meet my own target of reading 50 books in 2015, it
was a good year as far as reading was concerned. You can find the list of books
in &lt;a href=&#34;https://www.goodreads.com/user/year_in_books/2015/14029645&#34;&gt;goodreads&lt;/a&gt;. Unlike last year&amp;rsquo;s post this
post is more of a note on the books I read. Investing in a kindle an year
and a half ago was totally worth it, and nearly all of 2015&amp;rsquo;s reading was mostly
in kindle. Other than Val McDermid&amp;rsquo;s &lt;em&gt;&amp;ldquo;Killing the Shadows&amp;rdquo;&lt;/em&gt;, every other book was
read in Kindle. Managed to read 38 books in 2015, which was a bit lesser than
the previous year, but a few of the books were long pending dues. Goodreads
reports a total of 9248 pages were read in 2015, which averages to about 25
pages a day, which I&amp;rsquo;m happy about. This is how a distribution of pages looks
month wise, for more details on the graph and programs used refer to &lt;a href=&#34;http://abhishekl.in/Tech/goodreads/&#34;&gt;the last
edition of the post&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://abhishekl.in/images/pages-per-month-2015.png&#34; alt=&#34;pages_per_month&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Managed to read Fyodor Dostoyevsky&amp;rsquo;s &lt;em&gt;Crime and Punishment&lt;/em&gt; last year finally,
it was doubtless one of the best reads in the last year. Though it took a good 2
weeks of reading, it was well worth it. It was masterpiece storytelling, woven
around chilling St. Petersburg in the 19th century, posing challenging moral
questions, the amount of emotions he brings out in his characters is something
that you don&amp;rsquo;t see in many works. Do make it a point to read it if you ever get
a chance (of course the book is out of copyright and is available at project
Gutenberg etc.)&lt;/p&gt;

&lt;p&gt;On the thriller/detective fiction genre, read Gillian Flynn&amp;rsquo;s &lt;em&gt;Dark Places&lt;/em&gt;. I
guess I haven&amp;rsquo;t read much novels with characters as twisted as what Flynn could
come up with. Though having watched &lt;em&gt;Gone Girl&lt;/em&gt; the movie, which was brilliant
by the way, I kind of expected what I had in store while reading &lt;em&gt;Dark Places&lt;/em&gt;,
so probably that took off the element of surprise a little. Also read
Rowling/Galbraith&amp;rsquo;s &lt;em&gt;Silkworm&lt;/em&gt;. The way Rowling brings up the characters in her
novels is her speciality. &lt;em&gt;The Darkling Spy&lt;/em&gt; by Edward Wilson was another worthy
read, though I also read &lt;em&gt;The Envoy&lt;/em&gt; by the same author, liked the &lt;em&gt;The Darkling
Spy&lt;/em&gt; much better. You could visualize Berlin during the cold war era as a spy
hunting ground pretty well in this novel, it is not the action packed spy novel
which you would normally expect, but was a good read, and paints a pretty good
picture of various parts of Europe at that period.&lt;/p&gt;

&lt;p&gt;Also finished the remaining 2 books of David Pandolfe&amp;rsquo;s &lt;em&gt;Jump When Ready&lt;/em&gt;
series, it is rather lovely &amp;amp; creative take on afterlife. It is a light read and
I would suggest reading the series if you are able to lay your hands on it.&lt;/p&gt;

&lt;p&gt;On the books I wish I hadn&amp;rsquo;t read section, the top one was Sean Patrick&amp;rsquo;s
&lt;em&gt;Nikola Tesla: Imagination and the Man That Invented the 20th Century&lt;/em&gt;. This is
a DIY biography book where I guess the actual physical book has blank pages
where the reader is supposed to fill in facts about Tesla. Since I read the
kindle edition I didn&amp;rsquo;t get to see the blank pages I guess, so if you want to
know more about Tesla, I would suggest try Wikipedia. If you want to read a
rather rant on intelligence and then a few facts on Tesla, and again continue on
some more rants on creativity, then I guess this book fits the bill perfectly.&lt;/p&gt;

&lt;p&gt;This was closely followed by Chetan Bhagat&amp;rsquo;s, &lt;em&gt;Half Girlfriend&lt;/em&gt;, I guess the
only reason I ended up reading it was since it was free in Amazon&amp;rsquo;s Kindle
Unlimited Subscription. It would be hard to find something that is not a cliche
in this book. I think the book might succeed as a movie probably, of course what
you read exactly sounded like a movie screenplay. BTW, if you do have a Kindle
Unlimited Subscription, I would suggest spending your time in reading David
Pandolfe&amp;rsquo;s Jump When Ready series rather than spending the time on this one.&lt;/p&gt;

&lt;p&gt;Another book which had a &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt; ranking was Anand Neelakantan&amp;rsquo;s, &lt;em&gt;Asura: Tale of
Vanquished&lt;/em&gt;. While there was a lot of premise for a good and a creative tale in
viewing Ramayan from the opposite side, really bad narration and possibly
pushing the creative license to nearly twist the facts completely made this a
book I was happy to finish and never read again read more from the author type.
I guess it would be hard to find a single positive character in the book,
inspite of the fact that all the characters from &lt;em&gt;Ramayana&lt;/em&gt; are present in the
book. If you see most characters in actual Mahabharata or Ramayana epic, you
would see they are not entirely painted in black or white, it is shades of grey,
but this book instead chose to paint everyone black, by twisting facts a little,
some character who narrates the story, initially interesting, getting pretty
annoying as he starts whining in the book. If you&amp;rsquo;re really into revisionism try
reading M.T Vasudevan Nair&amp;rsquo;s &lt;em&gt;Randam Moozham&lt;/em&gt; (literally the second turn), it is
a epic retelling of Mahabharata from Bhima&amp;rsquo;s (the second brother) viewpoint.
Also I heard Shivaji Sawant&amp;rsquo;s &lt;em&gt;Mrityunjay&lt;/em&gt; based on Karna is again one of the
best books you can read. Still waiting to get my hands on that one. Hopefully
sometime soon.&lt;/p&gt;

&lt;p&gt;Overall 2015 was again a good year in terms of reading, I know this was a
particularly long blogpost which could have been split into individual reviews,
but thanks for reading if you have scrolled until here. Cya!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2014: the year in books, using Goodreads, pandas &amp; Hy</title>
      <link>http://abhishekl.in/post/Tech/goodreads/</link>
      <pubDate>Sun, 21 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://abhishekl.in/post/Tech/goodreads/</guid>
      <description>&lt;p&gt;&lt;code&gt;Note: The content has been updated to reflect the new kwargs style
in Hy, as such the snippets only work with the current Hy master&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As 2014 is coming to a close, I thought it would be a nice time to
review the year as far as reading was concerned. Since I track the
books I read using Goodreads, I felt it would be an interesting
experiment to see some numbers from Goodreads. Though Goodreads
provides an api, it doesn&amp;rsquo;t seem to be directly useful to get some
numbers from a user account (I could be wrong here). Fortunately, an
export to csv option is provieded in the account which helps in our
favor.&lt;/p&gt;

&lt;p&gt;For any kind of data analysis in python, &lt;a href=&#34;http://pandas.pydata.org&#34;&gt;pandas&lt;/a&gt; is a brilliant
library. Also it does most of the heavy lifting as far as processing
csv files are concerned. Since &lt;a href=&#34;http://hylang.org&#34;&gt;Hy&lt;/a&gt; works wherever python works, I
thought it would be an interesting experiment to use Hy to parse the
data.&lt;/p&gt;

&lt;p&gt;To start with reading csv is a simple call to pandas&amp;rsquo; &lt;code&gt;read_csv&lt;/code&gt;
function. This can be done with only the interesting fields.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;import &lt;/span&gt;&lt;span style=&#34;color: #B8860B&#34;&gt;pandas&lt;/span&gt;
        [&lt;span style=&#34;color: #B8860B&#34;&gt;numpy&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;:as&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;np&lt;/span&gt;]
        [&lt;span style=&#34;color: #B8860B&#34;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;:as&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;plt&lt;/span&gt;]
        [&lt;span style=&#34;color: #B8860B&#34;&gt;seaborn&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;:as&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;sns&lt;/span&gt;])

(&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #B8860B&#34;&gt;parse-goodreads-csv&lt;/span&gt; [&lt;span style=&#34;color: #B8860B&#34;&gt;filepath&lt;/span&gt;]
  (&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;let &lt;/span&gt;[[&lt;span style=&#34;color: #B8860B&#34;&gt;required-fields&lt;/span&gt; [&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Title&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Date Read&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Bookshelves&amp;quot;&lt;/span&gt;
                          &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Number of Pages&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Original Publication Year&amp;quot;&lt;/span&gt;]]
        (&lt;span style=&#34;color: #00A000&#34;&gt;pandas.read_csv&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;filepath&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;:usecols&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;required-fields&lt;/span&gt;
			             &lt;span style=&#34;color: #B8860B&#34;&gt;:index-col&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Date Read&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;:parse-dates&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;true&lt;/span&gt;)))
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now taking out only the column&amp;rsquo;s we&amp;rsquo;re interested in &amp;amp; filtering out
the data from only a particular year can be done by&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #B8860B&#34;&gt;books-in-year&lt;/span&gt; [&lt;span style=&#34;color: #B8860B&#34;&gt;dataframe&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;year&lt;/span&gt;]
  (&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;let &lt;/span&gt;[[&lt;span style=&#34;color: #B8860B&#34;&gt;day1&lt;/span&gt; (&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;fn &lt;/span&gt;[&lt;span style=&#34;color: #B8860B&#34;&gt;y&lt;/span&gt;] (&lt;span style=&#34;color: #00A000&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color: #AA22FF&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;y&lt;/span&gt;) &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;-01-01&amp;quot;&lt;/span&gt;))]]
    (&lt;span style=&#34;color: #AA22FF&#34;&gt;slice&lt;/span&gt; (&lt;span style=&#34;color: #00A000&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;dataframe&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;ix&lt;/span&gt;) (&lt;span style=&#34;color: #00A000&#34;&gt;day1&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;year&lt;/span&gt;) (&lt;span style=&#34;color: #00A000&#34;&gt;day1&lt;/span&gt; (&lt;span style=&#34;color: #AA22FF&#34;&gt;inc &lt;/span&gt;&lt;span style=&#34;color: #B8860B&#34;&gt;year&lt;/span&gt;)))))
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ix&lt;/code&gt; returns the index of dataframe, since we&amp;rsquo;ll be indexing by date
read, this allows us to select the required range, by simply selecting
a date range from the beginning of the year to the next year.&lt;/p&gt;

&lt;p&gt;Since it would be interesting to see the count of books as well as the
pages on a monthly basis, we should filter the data on a monthly
basis. Pandas offers a &lt;a href=&#34;http://pandas.pydata.org/pandas-docs/stable/groupby.html&#34;&gt;&lt;code&gt;groupby&lt;/code&gt;&lt;/a&gt; &amp;amp; &lt;code&gt;aggregate&lt;/code&gt; much similiar to
SQL like queries. So all we have to do is to group pages by month
here.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #B8860B&#34;&gt;aggregate-by-month&lt;/span&gt; [&lt;span style=&#34;color: #B8860B&#34;&gt;dataframe&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;params&lt;/span&gt;]
  &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Group a particular key by month&amp;quot;&lt;/span&gt;
  (&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt; &lt;/span&gt;(&lt;span style=&#34;color: #00A000&#34;&gt;.groupby&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;dataframe&lt;/span&gt; (&lt;span style=&#34;color: #00A000&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;dataframe&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;month&lt;/span&gt;))
      (&lt;span style=&#34;color: #00A000&#34;&gt;.aggregate&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;params&lt;/span&gt;)))
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The above function assumes that the dataframe object is already
indexed by a timeframe data, (Date Read in our case), then a simple
groupby month is performed and supplied to &lt;code&gt;aggregate&lt;/code&gt; which does a
cumulative operation on the grouped data according the supplied
functions. The threading operator &lt;code&gt;-&amp;gt;&lt;/code&gt; makes the result of the first
call as the first argument of the function. Now we have enough to get
some stats for the year.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;defn &lt;/span&gt;&lt;span style=&#34;color: #B8860B&#34;&gt;process&lt;/span&gt; [&lt;span style=&#34;color: #B8860B&#34;&gt;filepath&lt;/span&gt;]
  (&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;let &lt;/span&gt;[[&lt;span style=&#34;color: #B8860B&#34;&gt;books-in-2014&lt;/span&gt;
          (&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt; &lt;/span&gt;(&lt;span style=&#34;color: #00A000&#34;&gt;parse-goodreads-csv&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;filepath&lt;/span&gt;)
              (&lt;span style=&#34;color: #00A000&#34;&gt;books-in-year&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2014&lt;/span&gt;))]
        [&lt;span style=&#34;color: #B8860B&#34;&gt;pages-per-month&lt;/span&gt; (&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;-&amp;gt; &lt;/span&gt;(&lt;span style=&#34;color: #00A000&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;books-in-2014&lt;/span&gt; [[&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Number of Pages&amp;quot;&lt;/span&gt;]])
                         (&lt;span style=&#34;color: #00A000&#34;&gt;aggregate-by-month&lt;/span&gt; [&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;sum&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;count&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;np.mean&lt;/span&gt;]))]]
  (&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Pages read in 2014 &amp;quot;&lt;/span&gt;
         ((&lt;span style=&#34;color: #00A000&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;books-in-2014&lt;/span&gt; [&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Number of Pages&amp;quot;&lt;/span&gt;] &lt;span style=&#34;color: #AA22FF&#34;&gt;sum&lt;/span&gt;)))
  (&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Pages read in kindle&amp;quot;&lt;/span&gt;
         ((&lt;span style=&#34;color: #00A000&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;books-in-2014&lt;/span&gt; [(&lt;span style=&#34;color: #00A000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;books-in-2014.Bookshelves&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;kindle&amp;quot;&lt;/span&gt;)]
             [&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Number of Pages&amp;quot;&lt;/span&gt;] &lt;span style=&#34;color: #AA22FF&#34;&gt;sum&lt;/span&gt;)))
  (&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Monthly Stats&amp;quot;&lt;/span&gt;)
  (&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #B8860B&#34;&gt;pages-per-month&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;First, the &lt;code&gt;parse-csv&lt;/code&gt; function is given only the interesting columns,
also indexing is done via date read, we get &lt;code&gt;pages-per-month&lt;/code&gt; via the
aggregate &amp;amp; groupby function shown earlier. Counting the pages read in
Kindle was done by summing columns containing the Book shelves
(alternatively if you had marked the editions correctly another field
suggest the Kindle edition..).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Pages read in 2014  6659.0
Pages read in kindle 4489.0
Monthly Stats
Number of Pages
            sum  count        mean
 1              1061      3  353.666667
 2               136      2   68.000000
 6               373      1  373.000000
 8               484      2  242.000000
 9              1445      8  180.625000
 10             2126     17  125.058824
 11              262      1  262.000000
 12              772      6  128.666667
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally this is the plot of pages&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://abhishekl.in/images/pages-per-month.png&#34; alt=&#34;pages_per_month&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Overall 2014 was a good year as far as reading was concerned, read a
lot of classics which had been on my backlog for quite sometime. Also
read &lt;em&gt;The Guide&lt;/em&gt;, which was pending for quite some time. Next year I
should follow a more consistent schedule :), there were months with no
reading at all and a few with too much (the peak in october was
probably due to the combined holidays here, at that time) The raw data
and output (as well as the program) are available in my &lt;a href=&#34;http://github.com/theanalyst/cuddlebear&#34;&gt;github&lt;/a&gt;
repo.&lt;/p&gt;

&lt;p&gt;PS For those of you interested in knowing what I&amp;rsquo;ve been reading
checkout &lt;a href=&#34;https://www.goodreads.com/review/list/14029645-abhishek?read_at=2014&amp;amp;view=covers&#34;&gt;my goodreads 2014 list&lt;/a&gt;. Do suggest anything worth
reading in the comments. Cya!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>