<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Often Bearing Metaphoric Tense</title><link>http://theanalyst.github.io/</link><description></description><atom:link href="http://theanalyst.github.io/feeds/tech.rss.xml" rel="self"></atom:link><lastBuildDate>Sun, 01 Feb 2015 00:00:00 +0530</lastBuildDate><item><title>Faster python builds in Travis with container based infra</title><link>http://theanalyst.github.io/faster-python-builds-in-travis-with-container-based-infra.html</link><description>&lt;p&gt;Lately, travis CI has started supporting builds using &lt;a href="http://blog.travis-ci.com/2014-12-17-faster-builds-with-container-based-infrastructure/"&gt;container&lt;/a&gt;
based infrastructure which run much faster due to more available
resources and good use of caching. This is currently possible only for
projects that don't use &lt;code&gt;sudo&lt;/code&gt; atm . For more details read &lt;a href="http://docs.travis-ci.com/user/workers/container-based-infrastructure/"&gt;this&lt;/a&gt;
post. Of late, I have been submitting Pull Requests to various
projects to use this feature wherever possible. This post is primarily
oriented towards Python projects.&lt;/p&gt;
&lt;p&gt;For many python projects, a significant amount of time is spent in
installing &amp;amp; building the dependencies. So caching these should save
you a good amount of time. Pip downloads can be cached specifying a
cache directory, which will avoid hitting the pypi mirror for every
line in your requirements. The below examples assume that your testing
script is something like &lt;code&gt;make travis&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;sudo&lt;/span&gt; &lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;false&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;cache&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;directories&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; 
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;$HOME/.pip-cache&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;pip install -r requirements.txt --download-cache $HOME/.pip-cache&lt;/span&gt;   
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;make travis&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above lines will make sure that for subsequent runs pip packages
from the cache are used. However the packages will still need to be be
built, which means if you're using packages using C (lxml for eg), a
lot of time will be still spent for building the package itself. One
way of working around this would be the use of Python Wheels and
caching them as this avoids the need for subsequent builds. We could
download the wheels to a specified directory and cache that, so that
we can cut down on the build time.  So we would have something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;sudo&lt;/span&gt; &lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;false&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;cache&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;directories&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; 
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;$PWD/wheelhouse&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;pip wheel -r requirements.txt&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;pip install -r requirements.txt&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;make travis&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And voila! We have faster travis builds.&lt;/p&gt;
&lt;p&gt;PS If you have better ways to speedup, I'll be happy to hear, please
let me know in comments or hit me up on &lt;a href="https://twitter.com/abhishekl"&gt;twitter&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Abhishek L</dc:creator><pubDate>Sun, 01 Feb 2015 00:00:00 +0530</pubDate><guid>tag:theanalyst.github.io,2015-02-01:faster-python-builds-in-travis-with-container-based-infra.html</guid><category>Python</category><category>Travis</category></item><item><title>2014: the year in books, using Goodreads, pandas &amp; Hy</title><link>http://theanalyst.github.io/2014-the-year-in-books-using-goodreads-pandas-hy.html</link><description>&lt;p&gt;&lt;code&gt;Note: The content has been updated to reflect the new kwargs style
in Hy, as such the snippets only work with the current Hy master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As 2014 is coming to a close, I thought it would be a nice time to
review the year as far as reading was concerned. Since I track the
books I read using Goodreads, I felt it would be an interesting
experiment to see some numbers from Goodreads. Though Goodreads
provides an api, it doesn't seem to be directly useful to get some
numbers from a user account (I could be wrong here). Fortunately, an
export to csv option is provieded in the account which helps in our
favor.&lt;/p&gt;
&lt;p&gt;For any kind of data analysis in python, &lt;a href="http://pandas.pydata.org"&gt;pandas&lt;/a&gt; is a brilliant
library. Also it does most of the heavy lifting as far as processing
csv files are concerned. Since &lt;a href="http://hylang.org"&gt;Hy&lt;/a&gt; works wherever python works, I
thought it would be an interesting experiment to use Hy to parse the
data.&lt;/p&gt;
&lt;p&gt;To start with reading csv is a simple call to pandas' &lt;code&gt;read_csv&lt;/code&gt;
function. This can be done with only the interesting fields. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;import &lt;/span&gt;&lt;span class="nv"&gt;pandas&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;numpy&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;np&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;seaborn&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;sns&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;parse-goodreads-csv&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nv"&gt;required-fields&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Title&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Date Read&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Bookshelves&amp;quot;&lt;/span&gt;
                          &lt;span class="s"&gt;&amp;quot;Number of Pages&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Original Publication Year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;pandas.read_csv&lt;/span&gt; &lt;span class="nv"&gt;filepath&lt;/span&gt; &lt;span class="ss"&gt;:usecols&lt;/span&gt; &lt;span class="nv"&gt;required-fields&lt;/span&gt;
                     &lt;span class="ss"&gt;:index-col&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Date Read&amp;quot;&lt;/span&gt; &lt;span class="ss"&gt;:parse-dates&lt;/span&gt; &lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now taking out only the column's we're interested in &amp;amp; filtering out
the data from only a particular year can be done by&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;books-in-year&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;dataframe&lt;/span&gt; &lt;span class="nv"&gt;year&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nv"&gt;day1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;fn &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-01-01&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))]]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;slice&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dataframe&lt;/span&gt; &lt;span class="nv"&gt;ix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;day1&lt;/span&gt; &lt;span class="nv"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;day1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;inc &lt;/span&gt;&lt;span class="nv"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;ix&lt;/code&gt; returns the index of dataframe, since we'll be indexing by date
read, this allows us to select the required range, by simply selecting
a date range from the beginning of the year to the next year.&lt;/p&gt;
&lt;p&gt;Since it would be interesting to see the count of books as well as the
pages on a monthly basis, we should filter the data on a monthly
basis. Pandas offers a &lt;a href="http://pandas.pydata.org/pandas-docs/stable/groupby.html"&gt;&lt;code&gt;groupby&lt;/code&gt;&lt;/a&gt; &amp;amp; &lt;code&gt;aggregate&lt;/code&gt; much similiar to
SQL like queries. So all we have to do is to group pages by month
here.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;aggregate-by-month&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;dataframe&lt;/span&gt; &lt;span class="nv"&gt;params&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;Group a particular key by month&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;-&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.groupby&lt;/span&gt; &lt;span class="nv"&gt;dataframe&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;dataframe&lt;/span&gt; &lt;span class="nv"&gt;index&lt;/span&gt; &lt;span class="nv"&gt;month&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.aggregate&lt;/span&gt; &lt;span class="nv"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above function assumes that the dataframe object is already
indexed by a timeframe data, (Date Read in our case), then a simple
groupby month is performed and supplied to &lt;code&gt;aggregate&lt;/code&gt; which does a
cumulative operation on the grouped data according the supplied
functions. The threading operator &lt;code&gt;-&amp;gt;&lt;/code&gt; makes the result of the first
call as the first argument of the function. Now we have enough to get
some stats for the year.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;process&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nv"&gt;books-in-2014&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;-&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;parse-goodreads-csv&lt;/span&gt; &lt;span class="nv"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;books-in-year&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;pages-per-month&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;-&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;books-in-2014&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Number of Pages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
                         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;aggregate-by-month&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sum&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;count&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;np.mean&lt;/span&gt;&lt;span class="p"&gt;]))]]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Pages read in 2014 &amp;quot;&lt;/span&gt;
         &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;books-in-2014&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Number of Pages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Pages read in kindle&amp;quot;&lt;/span&gt;
         &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;books-in-2014&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;books-in-2014.Bookshelves&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;kindle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
             &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Number of Pages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Monthly Stats&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;pages-per-month&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First, the &lt;code&gt;parse-csv&lt;/code&gt; function is given only the interesting columns,
also indexing is done via date read, we get &lt;code&gt;pages-per-month&lt;/code&gt; via the
aggregate &amp;amp; groupby function shown earlier. Counting the pages read in
Kindle was done by summing columns containing the Book shelves
(alternatively if you had marked the editions correctly another field
suggest the Kindle edition..).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Pages read in 2014  6659.0
Pages read in kindle 4489.0
Monthly Stats
Number of Pages
            sum  count        mean
 1              1061      3  353.666667
 2               136      2   68.000000
 6               373      1  373.000000
 8               484      2  242.000000
 9              1445      8  180.625000
 10             2126     17  125.058824
 11              262      1  262.000000
 12              772      6  128.666667
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally this is the plot of pages&lt;/p&gt;
&lt;p&gt;&lt;img alt="pages_per_month" src="images/pages-per-month.png" /&gt;&lt;/p&gt;
&lt;p&gt;Overall 2014 was a good year as far as reading was concerned, read a
lot of classics which had been on my backlog for quite sometime. Also
read &lt;em&gt;The Guide&lt;/em&gt;, which was pending for quite some time. Next year I
should follow a more consistent schedule :), there were months with no
reading at all and a few with too much (the peak in october was
probably due to the combined holidays here, at that time) The raw data
and output (as well as the program) are available in my &lt;a href="http://github.com/theanalyst/cuddlebear"&gt;github&lt;/a&gt;
repo.&lt;/p&gt;
&lt;p&gt;PS For those of you interested in knowing what I've been reading
checkout &lt;a href="https://www.goodreads.com/review/list/14029645-abhishek?read_at=2014&amp;amp;view=covers"&gt;my goodreads 2014 list&lt;/a&gt;. Do suggest anything worth
reading in the comments. Cya!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Abhishek L</dc:creator><pubDate>Sun, 21 Dec 2014 00:00:00 +0530</pubDate><guid>tag:theanalyst.github.io,2014-12-21:2014-the-year-in-books-using-goodreads-pandas-hy.html</guid><category>Hy</category><category>Goodreads</category><category>Pandas</category><category>Kindle</category></item><item><title>Pelican updated!</title><link>http://theanalyst.github.io/pelican-updated.html</link><description>&lt;p&gt;It has been a significant time between the posts. This time the reason
moslty being me lazy enough not to fix the blog after a pelican
update. Surpisingly though there wasn't much of a change required
other than tweaking a couple of configuration variables &amp;amp; renaming the
&lt;code&gt;pelicanconf&lt;/code&gt; file. Hope to start blogging again soon. This time for
real and hopefully more tech posts. C ya :)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Abhishek L</dc:creator><pubDate>Mon, 08 Sep 2014 00:00:00 +0530</pubDate><guid>tag:theanalyst.github.io,2014-09-08:pelican-updated.html</guid><category>Blog</category><category>Procrastination</category><category>Pelican</category></item><item><title>The Silent Observer's Metamorphosis</title><link>http://theanalyst.github.io/the-silent-observers-metamorphosis.html</link><description>&lt;p&gt;My friend, Jinto, wrote a blog-post titled
&lt;em&gt;&lt;a href="http://untold-opinion.blogspot.in/2012/12/transitioning-from-learners-to-observers.html"&gt;Transitioning from learners to observers&lt;/a&gt;&lt;/em&gt;, which talks about the
increasing transition from a learner to being a casual observer of
things in this digital era. The availability of a wide range of tools
these days to do &lt;em&gt;almost anything&lt;/em&gt;, has slowly reduced the need to
learn, a very valid observation.&lt;/p&gt;
&lt;p&gt;While the usefulness of tools is great, it might fail miserably when
you want things certain way, and the tool may not be designed for
that. A real life example would be this: in college, ever since the
second year, I was using a software called, LyX for creating
reports. LyX allows you to create LaTeX documents without the need to
actually know TeX, so I never felt the necessity to learn LaTeX, for
real. While LyX is a great tool for creating documents, if an error
crept in documents somehow, or if you want to create a report with a
custom template, then it fails miserably. (Also at the time I was in
college, LyX had no support for extended unicode, using XeTeX and the
like etc.) So towards the end I had to learn TeX the hard way, when I
was pressed for time. A recent conversation took place on #emacs in
irc&lt;sup id="fnref:irc"&gt;&lt;a class="footnote-ref" href="#fn:irc" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;, where someone asked about the right tools for LaTeX, and
possibilities of LyX etc., for which a reply came as while there are a
number of tools which may generate LaTeX files for you without having
to learn it, errors it generate might set your hair on fire (and this
mostly by experience, takes place on the previous night of the
deadline, when you see cryptic latex errors that have no end)&lt;sup id="fnref:emacs"&gt;&lt;a class="footnote-ref" href="#fn:emacs" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Another thing that is in tandem with the declining reading habit in
this era is the works of literature being converted to movies. While
movies of literary works may certainly be the easy way out, it may not
always do justice to the author’s creative genius in every case. (Of
the top 20 IMDB movies, 11 are based on literary works) Reading the 7
Harry Potter books will help in realising why a muggle like
J.K.Rowling is a billionaire. While movies tell a great story, the
reading experience is unparalleled.&lt;/p&gt;
&lt;p&gt;Moving on, one of the reasons for the metamorphosis of a learner to
being a silent observer, is the fact that, you're in a comfort zone
when there is a lazy tool to do things for you, and hence there is no
real need to try to do things differently. And mostly the learning
process gets initiated only when you &lt;em&gt;want&lt;/em&gt; things to work in a
certain way. For me, this blog was an experiment to learn a &lt;em&gt;little&lt;/em&gt;
webdesign, while I was comfortable with blogger all along, the fact
is, you can blog a lifetime in blogger and still need not know what
HTML or css looks like. My requirement was to make a decent site that
looks ok in mobile as well (a responsive web design experiment, as
some would call it), while the output may not be what you can compare
with a web developer's design, at least I learnt the process of
writing a half decent responsive media queries in css. There may be
many talented people who can generate a better looking website in less
than a tenth of the time I used to create mine, but that certainly
doesn't take away the knowledge aquired in trying to do it, and I
believe that is important.  As said in article at
&lt;a href="http://simpleprogrammer.com/2012/09/23/learning-to-learn/"&gt;Simple Programmer&lt;/a&gt;, the true goal of &lt;em&gt;learning&lt;/em&gt;, which is the
ability to put knowledge into action. An english philospher’s famous
words were this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“The great aim of education is not knowledge but action”
&lt;small&gt;Herbert Spencer&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ultimately it is picking up something you end up loving and learning
about it. Trying to do things in a different way can definitely open
new channels.  To conclude, I will quote something from
&lt;a href="http://en.wikipedia.org/wiki/Tom_Peters"&gt;Tom Peters&lt;/a&gt;, a quote often misattributed to Leanardo Da Vinci, on innovation and success:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Life is pretty simple: You do some stuff. Most fails. Some works. You
do more of what works. If it works big, others quickly copy it. Then
you do something else. The trick is the doing something else.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;P.S if you haven’t clicked the link to the article
&lt;a href="http://simpleprogrammer.com/2012/09/23/learning-to-learn/"&gt;Learning to learn&lt;/a&gt; at Simple Programmer, do it now, certainly
worth a read.&lt;/p&gt;
&lt;h3&gt;Foot Notes&lt;/h3&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:irc"&gt;
&lt;p&gt;If you, like me, were wondering about how a TeX conversation
was taking place in #emacs, well, it all started with TeXmacs&amp;#160;&lt;a class="footnote-backref" href="#fnref:irc" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:emacs"&gt;
&lt;p&gt;Also, the channel being emacs, the advice was to use AucTeX
+ emacs, though ultimately I guess the guy settled with TeXmaker. The
former has a (dis)advantage of a steeper learning curve (and might be
an overkill if your only aim is to generate tex files, though proviedes an unobtrusive learning environment nonetheless) &amp;#160;&lt;a class="footnote-backref" href="#fnref:emacs" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">theanalyst</dc:creator><pubDate>Sat, 22 Dec 2012 00:00:00 +0530</pubDate><guid>tag:theanalyst.github.io,2012-12-22:the-silent-observers-metamorphosis.html</guid><category>Tech</category><category>Learn</category><category>Emacs</category></item><item><title>Static site generators &amp; Everything else</title><link>http://theanalyst.github.io/static-site-generators-everything-else.html</link><description>&lt;p&gt;This post lists the details of my blog, which is powered by gh-pages
and pelican. In short another guy puts up his blog at GitHub and blogs
about it. It initially started as a Lorem Ipsum content while I was
testing out my rough and edgy pelican theme. You have been warned!&lt;/p&gt;
&lt;p&gt;Welcome to the new avatar of my blog which is powered by &lt;a href="http://docs.getpelican.com/en/3.0/" title="pelican"&gt;pelican&lt;/a&gt;,
just another static site generator. For the uninitiated, static sites
are just a bunch of html pages, reminiscent of those old times where
people used some ftp program to put some html pages in some server
space. Remember the saying, “the more things change, the more they
remain the same.” It is a full circle from plain html -&amp;gt; dynamic
content based websites -&amp;gt; Back to plain html again. Well static site
generators do just that, convert your favorite markup format into
something a webserver can serve.&lt;/p&gt;
&lt;p&gt;Also static site generators are dime a dozen, these days, you will
always get one matching the language of your choice and markup of your
choice as well. (Psst. if you are interested, I have tried making a
sentence with a few If you are the type who hates wordplay, skip right
ahead, there is nothing here… &lt;sup id="fnref:wordplay"&gt;&lt;a class="footnote-ref" href="#fn:wordplay" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;). &lt;/p&gt;
&lt;p&gt;At the moment Jekyll &lt;em&gt;arguably&lt;/em&gt; leads the pack&lt;sup id="fnref:lists"&gt;&lt;a class="footnote-ref" href="#fn:lists" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;,
with close to ~8.2K watchers in Github, while that metric doesn’t
actually tell the number of sites actually built using Jekyll. FYI,
almost any post on jekyll trends in Hacker News, and even the US
election campaign has used Jekyll for blogging. A more
interesting information would be just googling Jekyll, about 4/10
links in the first page go to &lt;em&gt;Jekyll&lt;/em&gt; the static site generator, the
rest mostly links to Jekyll the TV show, and none link to &lt;em&gt;Jekyll and
Hyde&lt;/em&gt;, the novella (condolences to R L Stevenson). This is similar to
googling “Big Bang Theory”, TV has a higher preference than cosmology,
of course.&lt;sup id="fnref:tweet"&gt;&lt;a class="footnote-ref" href="#fn:tweet" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; (Googling “&lt;em&gt;the&lt;/em&gt; Big Bang theory” will have
actually no first page results on cosmology at all…)&lt;/p&gt;
&lt;p&gt;Now talking that much on jekyll, this site isn't generated via Jekyll,
it is generated by Pelican, a static generator written in python. And
this was the primary reason, just that in case things need to work in
a certain way, it could be done without setting my hair on fire.
Though knowledge of python isn't an absolute necessity if your
intention is just to create a site in pelican, but recommended. Like
other well known static site generators, pelican also features these
(last point is a bit debatable):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Good Documentation&lt;/li&gt;
&lt;li&gt;Easy templating system&lt;/li&gt;
&lt;li&gt;Good community support&lt;/li&gt;
&lt;li&gt;Written in python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Posts are written in markdown, in emacs. A simple git repository with
post commit hooks that runs pelican on each commit, does the trick of
generating the html pages. The config file is a simple python file
which takes care of all the site related details, links etc.&lt;/p&gt;
&lt;p&gt;Pelican comes with a default set of themes, and a few others available
at the &lt;a href="https://github.com/getpelican/pelican-themes"&gt;pelican-themes&lt;/a&gt; repo, which can help in setting up a blog
running without much hassle. Building a theme is also pretty easy, and
it uses Jinja templating in the backend, this blog look right now is a
customised theme built upon the existing tuxlite-tbs theme, I will
write on that another time. (This post is already long enough as it
is)&lt;/p&gt;
&lt;p&gt;For the typographically conscious, there is support from the excellent
emacs &lt;a href="https://github.com/jorgenschaefer/typoel" title="Typographical Punctuation marks"&gt;typo&lt;/a&gt; mode which takes care of your punctuation marks, if
you are the type who cares about the &lt;a href="http://www.smashingmagazine.com/2011/08/15/mind-your-en-and-em-dashes-typographic-etiquette/" title="Mind your em and en dashes"&gt;em &amp;amp; en–dashes&lt;/a&gt;. (Yes, we
have a mode for everything… including a &lt;a href="http://en.wikipedia.org/wiki/ELIZA" title="Eliza, the quintessential psychotherapist"&gt;psychotherapist&lt;/a&gt;, who can
kill time, if not depression) That is pretty much it, as far as
generating a site in pelican is concerned, simple.&lt;/p&gt;
&lt;h3&gt;Foot Notes&lt;/h3&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:lists"&gt;
&lt;p&gt;For more info on this read,a &lt;a href="https://gist.github.com/4181764" title="Another list, on static site generators"&gt;crowdsourced list&lt;/a&gt; and a &lt;a href="http://news.ycombinator.com/item?id=4857473" title="Poll your preference"&gt;HN poll&lt;/a&gt; for static generators &amp;#160;&lt;a class="footnote-backref" href="#fnref:lists" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:tweet"&gt;
&lt;p&gt;This &lt;a href="https://twitter.com/neiltyson/status/245348360259768321" title="Interesting tweet, that sums up TBBT popularity"&gt;tweet&lt;/a&gt;, sums up the The Big Bang Theory
popularity, its precedence in search results…&amp;#160;&lt;a class="footnote-backref" href="#fnref:tweet" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:wordplay"&gt;
&lt;p&gt;These days, one is &lt;a href="http://awestruct.org" title="Awestruct"&gt;awestruc&lt;/a&gt; with the number of
possibilities out there, generating a static site is as easy as baking
a &lt;a href="https://bolt80.com/piecrust" title="PieCrust"&gt;piecrust&lt;/a&gt;. You just have to &lt;a href="https://github.com/schrockwell/chisel" title="Chisel"&gt;chisel&lt;/a&gt; your heart's content in
the markup format of your choice and hire a &lt;a href="http://middlemanapp.com" title="Middle Man"&gt;middleman&lt;/a&gt; to solve
the strange case of Dr.&lt;a href="http://jekyllrb.com" title="jekyll"&gt;Jekyll&lt;/a&gt; and Mr.&lt;a href="http://ringce.com/hyde" title="hyde, Jekyll’s evil alter-ego in python "&gt;Hyde&lt;/a&gt;, whose obsession
with &lt;a href="http://octopress.org" title="Octopress, pressing content for hackers"&gt;Octopress&lt;/a&gt;, is &lt;a href="https://github.com/blahed/frank" title="Frank"&gt;frank&lt;/a&gt;ly &lt;a href="https://github.com/caolan/petrify" title="Petrify"&gt;petrify&lt;/a&gt;ing. (This is far
from the list of possibilities, but it is difficult, though, to make a
valid English sentence with all the static site generators out
there. A relatively comprehensive list is at &lt;a href="http://nanoc.stoneship.org" title="nanoc"&gt;nanoc&lt;/a&gt; which, FYI, is
also another static site generator.  Choose your poison)&amp;#160;&lt;a class="footnote-backref" href="#fnref:wordplay" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">theanalyst</dc:creator><pubDate>Mon, 03 Dec 2012 14:23:00 +0530</pubDate><guid>tag:theanalyst.github.io,2012-12-03:static-site-generators-everything-else.html</guid><category>Tech</category><category>Python</category><category>Emacs</category></item></channel></rss>